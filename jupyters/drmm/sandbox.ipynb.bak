{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n",
      "/data/users/fyx/.local/python3/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n",
      "  return f(*args, **kwds)\n",
      "/data/users/fyx/.local/python3/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "import keras\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matchzoo as mz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_pack = mz.datasets.wiki_qa.load_data('train', task='ranking')\n",
    "valid_pack = mz.datasets.wiki_qa.load_data('dev', task='ranking', filter=True)\n",
    "predict_pack = mz.datasets.wiki_qa.load_data('test', task='ranking', filter=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing text_left with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 2118/2118 [00:00<00:00, 8023.59it/s]\n",
      "Processing text_right with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 18841/18841 [00:04<00:00, 4625.69it/s]\n",
      "Processing text_right with append: 100%|██████████| 18841/18841 [00:00<00:00, 634503.57it/s]\n",
      "Building FrequencyFilterUnit from a datapack.: 100%|██████████| 18841/18841 [00:00<00:00, 128219.91it/s]\n",
      "Processing text_right with transform: 100%|██████████| 18841/18841 [00:00<00:00, 68630.34it/s] \n",
      "Processing text_left with extend: 100%|██████████| 2118/2118 [00:00<00:00, 542870.68it/s]\n",
      "Processing text_right with extend: 100%|██████████| 18841/18841 [00:00<00:00, 654266.14it/s]\n",
      "Building VocabularyUnit from a datapack.: 100%|██████████| 404415/404415 [00:00<00:00, 2718062.39it/s]\n",
      "Processing text_left with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 2118/2118 [00:00<00:00, 8539.99it/s]\n",
      "Processing text_right with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 18841/18841 [00:04<00:00, 4597.65it/s]\n",
      "Processing text_right with transform: 100%|██████████| 18841/18841 [00:00<00:00, 118477.91it/s]\n",
      "Processing text_left with transform: 100%|██████████| 2118/2118 [00:00<00:00, 151673.82it/s]\n",
      "Processing text_right with transform: 100%|██████████| 18841/18841 [00:00<00:00, 116500.37it/s]\n",
      "Processing length_left with len: 100%|██████████| 2118/2118 [00:00<00:00, 416480.82it/s]\n",
      "Processing length_right with len: 100%|██████████| 18841/18841 [00:00<00:00, 639318.50it/s]\n",
      "Processing text_left with transform: 100%|██████████| 2118/2118 [00:00<00:00, 112158.78it/s]\n",
      "Processing text_right with transform: 100%|██████████| 18841/18841 [00:00<00:00, 78673.92it/s]\n"
     ]
    }
   ],
   "source": [
    "preprocessor = mz.preprocessors.BasicPreprocessor(fixed_length_left=10, fixed_length_right=100, remove_stop_words=True)\n",
    "train_pack_processed = preprocessor.fit_transform(train_pack)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing text_left with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 122/122 [00:00<00:00, 8291.82it/s]\n",
      "Processing text_right with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 1115/1115 [00:00<00:00, 4586.15it/s]\n",
      "Processing text_right with transform: 100%|██████████| 1115/1115 [00:00<00:00, 106902.16it/s]\n",
      "Processing text_left with transform: 100%|██████████| 122/122 [00:00<00:00, 109198.70it/s]\n",
      "Processing text_right with transform: 100%|██████████| 1115/1115 [00:00<00:00, 111359.39it/s]\n",
      "Processing length_left with len: 100%|██████████| 122/122 [00:00<00:00, 136491.09it/s]\n",
      "Processing length_right with len: 100%|██████████| 1115/1115 [00:00<00:00, 439369.50it/s]\n",
      "Processing text_left with transform: 100%|██████████| 122/122 [00:00<00:00, 83886.08it/s]\n",
      "Processing text_right with transform: 100%|██████████| 1115/1115 [00:00<00:00, 60616.83it/s]\n",
      "Processing text_left with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 237/237 [00:00<00:00, 6939.22it/s]\n",
      "Processing text_right with chain_transform of TokenizeUnit => LowercaseUnit => PuncRemovalUnit: 100%|██████████| 2300/2300 [00:00<00:00, 4599.53it/s]\n",
      "Processing text_right with transform: 100%|██████████| 2300/2300 [00:00<00:00, 128613.32it/s]\n",
      "Processing text_left with transform: 100%|██████████| 237/237 [00:00<00:00, 137947.55it/s]\n",
      "Processing text_right with transform: 100%|██████████| 2300/2300 [00:00<00:00, 123333.49it/s]\n",
      "Processing length_left with len: 100%|██████████| 237/237 [00:00<00:00, 273391.10it/s]\n",
      "Processing length_right with len: 100%|██████████| 2300/2300 [00:00<00:00, 546907.38it/s]\n",
      "Processing text_left with transform: 100%|██████████| 237/237 [00:00<00:00, 82562.30it/s]\n",
      "Processing text_right with transform: 100%|██████████| 2300/2300 [00:00<00:00, 13918.50it/s]\n"
     ]
    }
   ],
   "source": [
    "valid_pack_processed = preprocessor.transform(valid_pack)\n",
    "predict_pack_processed = preprocessor.transform(predict_pack)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ranking_task = mz.tasks.Ranking(loss=mz.losses.RankCrossEntropyLoss(num_neg=4))\n",
    "ranking_task.metrics = [\n",
    "    mz.metrics.NormalizedDiscountedCumulativeGain(k=3),\n",
    "    mz.metrics.NormalizedDiscountedCumulativeGain(k=5),\n",
    "    mz.metrics.MeanAveragePrecision()\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter \"name\" set to DRMM.\n",
      "Parameter \"embedding_trainable\" set to True.\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "text_left (InputLayer)          (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "embedding (Embedding)           (None, 10, 300)      5002200     text_left[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "dense_1 (Dense)                 (None, 10, 1)        300         embedding[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "match_histogram (InputLayer)    (None, 10, 30)       0                                            \n",
      "__________________________________________________________________________________________________\n",
      "attention_mask (Lambda)         (None, 10, 1)        0           dense_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "dense_2 (Dense)                 (None, 10, 10)       310         match_histogram[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "attention_probs (Lambda)        (None, 10, 1)        0           attention_mask[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "dense_3 (Dense)                 (None, 10, 1)        11          dense_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "dot_1 (Dot)                     (None, 1, 1)         0           attention_probs[0][0]            \n",
      "                                                                 dense_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "flatten_1 (Flatten)             (None, 1)            0           dot_1[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "dense_4 (Dense)                 (None, 1)            2           flatten_1[0][0]                  \n",
      "==================================================================================================\n",
      "Total params: 5,002,823\n",
      "Trainable params: 5,002,823\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "bin_size = 30\n",
    "model = mz.models.DRMM()\n",
    "model.params['input_shapes'] = [[10,], [10, bin_size,]]\n",
    "model.params['task'] = ranking_task\n",
    "model.params['mask_value'] = 0\n",
    "model.params['embedding_input_dim'] = preprocessor.context['vocab_size'] + 1\n",
    "model.params['embedding_output_dim'] = 300\n",
    "model.params['mlp_num_layers'] = 1\n",
    "model.params['mlp_num_units'] = 10\n",
    "model.params['mlp_num_fan_out'] = 1\n",
    "model.params['mlp_activation_func'] = 'tanh'\n",
    "model.params['optimizer'] = 'adadelta'\n",
    "model.guess_and_fill_missing_params()\n",
    "model.build()\n",
    "model.compile()\n",
    "model.backend.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "glove_embedding = mz.datasets.embeddings.load_glove_embedding(dimension=300)\n",
    "embedding_matrix = glove_embedding.build_matrix(preprocessor.context['vocab_unit'].state['term_index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# normalize the word embedding for fast histogram generating.\n",
    "l2_norm = np.sqrt((embedding_matrix*embedding_matrix).sum(axis=1))\n",
    "embedding_matrix = embedding_matrix / l2_norm[:, np.newaxis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.load_embedding_matrix(embedding_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_generator = mz.HistogramDataGenerator(data_pack=predict_pack_processed,\n",
    "                                           embedding_matrix=embedding_matrix,\n",
    "                                           bin_size=bin_size, \n",
    "                                           hist_mode='LCH')\n",
    "pred_x, pred_y = pred_generator[:]\n",
    "evaluate = mz.callbacks.EvaluateAllMetrics(model, \n",
    "                                           x=pred_x, \n",
    "                                           y=pred_y, \n",
    "                                           once_every=1, \n",
    "                                           batch_size=len(pred_y),\n",
    "                                           model_save_path='./drmm_pretrained_model/'\n",
    "                                          )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "102"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_generator = mz.HistogramPairDataGenerator(train_pack_processed, embedding_matrix, bin_size, 'LCH',\n",
    "                                                num_dup=2, num_neg=4, batch_size=20)\n",
    "len(train_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 1.5398Epoch 1/30\n",
      "102/102 [==============================] - 7s 73ms/step - loss: 1.5397\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.5010246328297064 - normalized_discounted_cumulative_gain@5(0): 0.5683055337819536 - mean_average_precision(0): 0.5208140957157203\n",
      "Epoch 2/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 1.4278\n",
      "102/102 [==============================] - 7s 64ms/step - loss: 1.4268\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.5671621422842209 - normalized_discounted_cumulative_gain@5(0): 0.6271033747133542 - mean_average_precision(0): 0.5831514490551901\n",
      "Epoch 3/30\n",
      "102/102 [==============================] - 7s 66ms/step - loss: 1.3273\n",
      "Epoch 3/30Validation: normalized_discounted_cumulative_gain@3(0): 0.5671621422842209 - normalized_discounted_cumulative_gain@5(0): 0.6271033747133542 - mean_average_precision(0): 0.5831514490551901\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.5607839376465166 - normalized_discounted_cumulative_gain@5(0): 0.6168473766385947 - mean_average_precision(0): 0.5763476750045412\n",
      "Epoch 4/30\n",
      "102/102 [==============================] - 7s 70ms/step - loss: 1.2450\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.5607839376465166 - normalized_discounted_cumulative_gain@5(0): 0.6168473766385947 - mean_average_precision(0): 0.5763476750045412\n",
      "Epoch 4/30\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6045765395592837 - normalized_discounted_cumulative_gain@5(0): 0.6555670256776202 - mean_average_precision(0): 0.6121521466961747\n",
      "Epoch 5/30\n",
      "102/102 [==============================] - 7s 71ms/step - loss: 1.1480\n",
      "\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6021293712426852 - normalized_discounted_cumulative_gain@5(0): 0.6542247057985696 - mean_average_precision(0): 0.609089639440752\n",
      "Epoch 6/30\n",
      "102/102 [==============================] - 7s 66ms/step - loss: 1.0507\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6036866296664343 - normalized_discounted_cumulative_gain@5(0): 0.6579747430557098 - mean_average_precision(0): 0.6202730172007013\n",
      "Epoch 7/30\n",
      "102/102 [==============================] - 7s 73ms/step - loss: 0.9631\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6227566809292652 - normalized_discounted_cumulative_gain@5(0): 0.6741522305088405 - mean_average_precision(0): 0.6331739514692531\n",
      "Epoch 8/30\n",
      "102/102 [==============================] - 7s 65ms/step - loss: 0.8936\n",
      "Epoch 8/30\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6140644884301454 - normalized_discounted_cumulative_gain@5(0): 0.6722900401921144 - mean_average_precision(0): 0.6291469888642851\n",
      "Epoch 9/30\n",
      "102/102 [==============================] - 7s 73ms/step - loss: 0.8373\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6132175800799072 - normalized_discounted_cumulative_gain@5(0): 0.6748858427986316 - mean_average_precision(0): 0.6293515939549126\n",
      "Epoch 10/30\n",
      "102/102 [==============================] - 7s 66ms/step - loss: 0.7951\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6054812715363775 - normalized_discounted_cumulative_gain@5(0): 0.6633254731389622 - mean_average_precision(0): 0.618757245918859\n",
      "Epoch 11/30\n",
      "102/102 [==============================] - 7s 67ms/step - loss: 0.7653\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6101176734690839 - normalized_discounted_cumulative_gain@5(0): 0.6630834615320901 - mean_average_precision(0): 0.6301654152570357\n",
      "Epoch 12/30\n",
      "102/102 [==============================] - 7s 67ms/step - loss: 0.7396\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6093118039332901 - normalized_discounted_cumulative_gain@5(0): 0.666101653112436 - mean_average_precision(0): 0.6259078526133971\n",
      "Epoch 13/30\n",
      "102/102 [==============================] - 7s 68ms/step - loss: 0.7171\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6046503536736646 - normalized_discounted_cumulative_gain@5(0): 0.6633650277429003 - mean_average_precision(0): 0.6211979001186344\n",
      "Epoch 14/30\n",
      "102/102 [==============================] - 7s 65ms/step - loss: 0.6989\n",
      "\bValidation: normalized_discounted_cumulative_gain@3(0): 0.6128934100846325 - normalized_discounted_cumulative_gain@5(0): 0.6671794205710068 - mean_average_precision(0): 0.6281009474094624\n",
      "Epoch 15/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6814Epoch 15/30\n",
      "102/102 [==============================] - 7s 68ms/step - loss: 0.6845\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6074908465642 - normalized_discounted_cumulative_gain@5(0): 0.6643479368943316 - mean_average_precision(0): 0.6213480749268805\n",
      "Epoch 16/30\n",
      "102/102 [==============================] - 7s 67ms/step - loss: 0.6734\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6091912361440882 - normalized_discounted_cumulative_gain@5(0): 0.6660476742505586 - mean_average_precision(0): 0.6239865042425249\n",
      "Epoch 17/30\n",
      "102/102 [==============================] - 7s 67ms/step - loss: 0.6612\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6040022255306846 - normalized_discounted_cumulative_gain@5(0): 0.6618500094969316 - mean_average_precision(0): 0.6162656308273106\n",
      "Epoch 18/30\n",
      "102/102 [==============================] - 7s 66ms/step - loss: 0.6527\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6044899648577726 - normalized_discounted_cumulative_gain@5(0): 0.6627589020495371 - mean_average_precision(0): 0.6198932492445789\n",
      "Epoch 19/30\n",
      "102/102 [==============================] - 7s 70ms/step - loss: 0.6455\n",
      "\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6053811419228498 - normalized_discounted_cumulative_gain@5(0): 0.6574540863082214 - mean_average_precision(0): 0.6180619050052568\n",
      "Epoch 20/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6391Epoch 20/30\n",
      "102/102 [==============================] - 7s 71ms/step - loss: 0.6383\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.607972708567815 - normalized_discounted_cumulative_gain@5(0): 0.6590529715331155 - mean_average_precision(0): 0.6186667711214485\n",
      "Epoch 21/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6333Validation: normalized_discounted_cumulative_gain@3(0): 0.607972708567815 - normalized_discounted_cumulative_gain@5(0): 0.6590529715331155 - mean_average_precision(0): 0.6186667711214485\n",
      "102/102 [==============================] - 7s 68ms/step - loss: 0.6336\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6051958672431348 - normalized_discounted_cumulative_gain@5(0): 0.6583289215361753 - mean_average_precision(0): 0.6200587944020902\n",
      "Epoch 22/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6290Validation: normalized_discounted_cumulative_gain@3(0): 0.6051958672431348 - normalized_discounted_cumulative_gain@5(0): 0.6583289215361753 - mean_average_precision(0): 0.6200587944020902\n",
      "Epoch 22/30\n",
      "102/102 [==============================] - 7s 68ms/step - loss: 0.6275\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6060120124060768 - normalized_discounted_cumulative_gain@5(0): 0.6633389484974418 - mean_average_precision(0): 0.6228681921875728\n",
      "Epoch 23/30\n",
      "102/102 [==============================] - 7s 69ms/step - loss: 0.6242\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6104847956224964 - normalized_discounted_cumulative_gain@5(0): 0.6650557415290117 - mean_average_precision(0): 0.6249213317617128\n",
      "Epoch 24/30\n",
      "102/102 [==============================] - 7s 65ms/step - loss: 0.6198\n",
      "Epoch 24/30Validation: normalized_discounted_cumulative_gain@3(0): 0.6107484945678373 - normalized_discounted_cumulative_gain@5(0): 0.6642363333652959 - mean_average_precision(0): 0.6268095768255221\n",
      "Epoch 25/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6166Validation: normalized_discounted_cumulative_gain@3(0): 0.6107484945678373 - normalized_discounted_cumulative_gain@5(0): 0.6642363333652959 - mean_average_precision(0): 0.6268095768255221\n",
      "102/102 [==============================] - 7s 70ms/step - loss: 0.6169\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6060619959812927 - normalized_discounted_cumulative_gain@5(0): 0.6625053244857897 - mean_average_precision(0): 0.6247652378773296\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6141Epoch 26/30\n",
      "102/102 [==============================] - 7s 70ms/step - loss: 0.6131\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6134606290020046 - normalized_discounted_cumulative_gain@5(0): 0.6655056275779849 - mean_average_precision(0): 0.6275190536841742\n",
      "Epoch 27/30\n",
      "102/102 [==============================] - 7s 67ms/step - loss: 0.6100\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6104597472955772 - normalized_discounted_cumulative_gain@5(0): 0.6624432622048022 - mean_average_precision(0): 0.6253933001906411\n",
      "Epoch 28/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6072Epoch 28/30\n",
      "102/102 [==============================] - 7s 66ms/step - loss: 0.6066\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.608574083035974 - normalized_discounted_cumulative_gain@5(0): 0.6632721865039131 - mean_average_precision(0): 0.6244271676025506\n",
      "Epoch 29/30\n",
      "101/102 [============================>.] - ETA: 0s - loss: 0.6041Epoch 29/30\n",
      "102/102 [==============================] - 7s 68ms/step - loss: 0.6044\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.608937862210369 - normalized_discounted_cumulative_gain@5(0): 0.6612291530885576 - mean_average_precision(0): 0.6240832534295225\n",
      "Epoch 30/30\n",
      "102/102 [==============================] - 7s 67ms/step - loss: 0.6000\n",
      "Validation: normalized_discounted_cumulative_gain@3(0): 0.6036135604924665 - normalized_discounted_cumulative_gain@5(0): 0.6643596082885277 - mean_average_precision(0): 0.6234765113670843\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_generator, epochs=30, callbacks=[evaluate], workers=30, use_multiprocessing=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.2173042 ],\n",
       "       [-2.3363535 ],\n",
       "       [ 0.2898716 ],\n",
       "       [ 1.160675  ],\n",
       "       [-1.8863118 ],\n",
       "       [-2.571641  ],\n",
       "       [ 2.253562  ],\n",
       "       [ 2.3714523 ],\n",
       "       [ 0.7752241 ],\n",
       "       [ 0.05869245]], dtype=float32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drmm_model = mz.load_model('./drmm_pretrained_model/16')\n",
    "test_generator = mz.HistogramDataGenerator(data_pack=valid_pack_processed[:10],\n",
    "                                           embedding_matrix=embedding_matrix,\n",
    "                                           bin_size=bin_size, \n",
    "                                           hist_mode='LCH')\n",
    "test_x, test_y = test_generator[:]\n",
    "prediction = drmm_model.predict(test_x)\n",
    "prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import shutil\n",
    "shutil.rmtree('./drmm_pretrained_model/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
